  NPMS
  webpackdashboard

  ['ababel/polyfill', './src/index.js'}
  //this lets us use await and makes our code look more synchronous instead of turning our code into a function
  -------------------
  constructor(props) {
    super(props);
    this.state = {
      value: 'Please write an essay about your favorite DOM element.'
    };
//what does the bind do again?
    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }


props are components that can be passes around
props are read only 

Pure component only rerenders when the propeties change
Component- when the parent changes
??so a pure component can only be set on the parent component?

event.peventDefault would prevent page from refreshing if it was a submit. 

state = anything that is changeable including by the user. 

functional components are a way to differentiate from components that take states.
aka dummy components aka representational components that dont change anything.

//

classs componentReview extends Component{
 //used when dealing with states which are changeable.
 //which can be updated with this.setState, and can take a second function to make it Async
 //encapsulated within this component so the parents or children of this componenet dont know about the states??? 
}

FormatDisplay.js is just referencing the dom. 

The reason we break functions up into components is so they can be used throughout files/injected throughout files. 

User.findByid: static
user.create: instance
/in React we used a stat  ic proptypes 

pure components change when the props that get passed to it get chnages. 


//STYLING
if you want to style inline use double curly braces. 

//problem
 handleChange = ({ target }) => {
   this.setState({ [target.name]: target.value }), () => {
     console.log(target.value);
   };
 };

//good
 handleChange = ({ target }) => {
   this.setState({ [target.name]: target.value }, () => {
     console.log(target.value);
   });
 };